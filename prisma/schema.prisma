// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id       String    @id @default(uuid())
  name     String
  email    String    @unique
  password String
  role     Role
  avatar   String? // Imagen de perfil
  messages Message[] @relation("UserMessages")

  // Relaci√≥n con Estudiantes o Profesores
  student   Student? @relation(fields: [studentId], references: [id])
  studentId String?  @unique

  professor   Professor? @relation(fields: [professorId], references: [id])
  professorId String?    @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  replies   Reply[]
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

model Student {
  id String @id @default(uuid())

  legajo     String          @unique
  status     String
  attendance Int
  courses    StudentCourse[]

  user User?
}

model Professor {
  id String @id @default(uuid())

  title        String
  department   Department @relation(fields: [departmentId], references: [id])
  courses      Course[]
  user         User?
  departmentId String

  @@index([departmentId])
}

model Course {
  id           String          @id @default(uuid())
  name         String
  code         String          @unique
  career       Career          @relation(fields: [careerId], references: [id])
  careerId     String
  department   Department      @relation(fields: [departmentId], references: [id])
  departmentId String
  professor    Professor?      @relation(fields: [professorId], references: [id])
  professorId  String?
  year         Int
  semester     Int
  credits      Int
  status       String
  description  String?
  schedule     Schedule[]
  syllabus     Json // Contiene temas y unidades
  bibliography Json // Lista de libros y autores
  students     StudentCourse[]
  evaluations  Evaluation[]

  @@index([careerId])
  @@index([departmentId])
  @@index([professorId])
}

model StudentCourse {
  student   Student @relation(fields: [studentId], references: [id])
  studentId String
  course    Course  @relation(fields: [courseId], references: [id])
  courseId  String
  grade     Float?
  status    String

  @@id([studentId, courseId])
  @@index([courseId])
}

model Evaluation {
  id        String   @id @default(uuid())
  name      String
  date      DateTime
  status    String
  published Boolean
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String

  @@index([courseId])
}

model Career {
  id          String       @id @default(uuid())
  name        String
  code        String       @unique
  curriculums Curriculum[]
  courses     Course[]
}

model Curriculum {
  id               String              @id @default(uuid())
  name             String
  career           Career              @relation(fields: [careerId], references: [id])
  careerId         String
  totalCredits     Int
  completedCredits Int
  subjects         CurriculumSubject[]

  @@index([careerId])
}

model CurriculumSubject {
  id           String     @id @default(uuid())
  code         String     @unique
  name         String
  credits      Int
  status       String
  grade        Float?
  type         String
  correlatives Json?
  curriculum   Curriculum @relation(fields: [curriculumId], references: [id])
  curriculumId String

  @@index([curriculumId])
}

model Department {
  id         String      @id @default(uuid())
  name       String
  professors Professor[]
  courses    Course[]
}

model Schedule {
  id       String @id @default(uuid())
  day      String
  time     String
  type     String
  location String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String

  @@index([courseId])
}

model Communication {
  id         String   @id @default(uuid())
  title      String
  type       String
  sender     String
  recipients String
  date       DateTime
  status     String
  content    String
  views      Int
  responses  Int
  replies    Reply[]
}

model Reply {
  id              String        @id @default(uuid())
  content         String
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  communication   Communication @relation(fields: [communicationId], references: [id])
  communicationId String
  date            DateTime

  @@index([communicationId])
  @@index([userId])
}

model Message {
  id        String   @id @default(uuid())
  sender    User     @relation("UserMessages", fields: [senderId], references: [id])
  senderId  String
  text      String
  timestamp DateTime @default(now())
  status    String

  @@index([senderId])
}
