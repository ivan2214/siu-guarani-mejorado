generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  email     String    @unique
  dni       String    @unique
  phone     String
  address   String
  name      String // Nombre del usuario
  password  String // Contraseña del usuario
  role      Role      @default(ESTUDIANTE)
  avatar    String?
  lastLogin DateTime?

  userStatus    UserStatus
  accountStatus AccountStatus @default(ACTIVA)

  student   Student?
  professor Professor?
  admin     Admin?

  messages       Message[]
  replies        Reply[]
  notifications  Notification[]
  recentActivity Activity[]
}

model Activity {
  id     String   @id @default(uuid())
  user   User     @relation(fields: [userId], references: [id])
  userId String
  action String
  date   DateTime @default(now())

  @@index([userId])
}

enum AccountStatus {
  ACTIVA
  BANEADA
  INACTIVA
  SUSPENDIDA
  ELIMINADA
}

model Admin {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  communication Communication[] // Comunicaciones creadas por el admin
}

enum Role {
  ADMIN
  ESTUDIANTE
  PROFESOR
}

enum UserStatus {
  ACTIVO
  INACTIVO
}

model Student {
  id     String  @id @default(uuid())
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  academicRecord AcademicRecord? // Historial académico del estudiante
  schedule       Schedule?       @relation(fields: [scheduleId], references: [id])
  scheduleId     String?

  subjectRecords SubjectRegistration[] // Materias inscritas por el estudiante
  examRecords    ExamRegistration[]
  career         Career[] // Carreras a las que pertenece el estudiante

  @@index([scheduleId])
}

model AcademicRecord {
  id String @id @default(uuid())

  averageGrade          Float? // Promedio general del estudiante
  completedSubjects     Int? // Materias completadas por el estudiante
  subjectRecords        Int? // Materias inscritas por el estudiante
  progressPercentCarrer Float? // Porcentaje de avance en la carrera

  student   Student @relation(fields: [studentId], references: [id])
  studentId String  @unique

  @@index([studentId])
}

model SubjectRegistration {
  // modelo de inscripción de estudiantes en materias
  id           String   @id @default(uuid())
  student      Student  @relation(fields: [studentId], references: [id]) // Estudiante al que pertenece la inscripción
  studentId    String
  subject      Subject  @relation(fields: [subjectId], references: [id]) // Materia a la que se inscribió el estudiante
  subjectId    String
  year         Int // Año de la inscripción
  semester     Int // Cuatrimestre de la inscripción
  grade        Float? // Calificación de la inscripción
  registeredAt DateTime @default(now()) // Fecha y hora de la inscripción a la materia

  @@index([subjectId])
  @@index([studentId])
}

model ExamRegistration {
  id           String   @id @default(uuid())
  student      Student  @relation(fields: [studentId], references: [id])
  studentId    String
  exam         Exam     @relation(fields: [examId], references: [id])
  examId       String
  year         Int // Año de la inscripción
  semester     Int // Cuatrimestre de la inscripción
  grade        Float?
  registeredAt DateTime @default(now())

  @@index([examId])
  @@index([studentId])
}

model Professor {
  id    String @id @default(uuid())
  name  String
  email String @unique

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  departments Department[]
  subjects    Subject[]
  schedules   Schedule[]
}

model Subject {
  id   String @id @default(uuid())
  code String @unique

  name        String
  year        Int
  semester    Int
  description String?
  capacity    Int

  progressPercentage Float // Porcentaje de avance en la materia

  career       Career     @relation(fields: [careerId], references: [id])
  careerId     String
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId String

  professors          Professor[]
  students            SubjectRegistration[]
  exams               Exam[]
  correlativeSubjects CorrelativeSubject[]
  schedules           Schedule[] // horarios de clase de una materia

  @@index([careerId])
  @@index([departmentId])
}

model CorrelativeSubject {
  id String @id @default(uuid())

  subject    Subject?  @relation(fields: [subjectId], references: [id])
  subjectId  String?
  schedule   Schedule? @relation(fields: [scheduleId], references: [id]) // Horario de clase 
  scheduleId String?

  @@index([subjectId])
  @@index([scheduleId])
}

model Exam {
  id        String   @id @default(uuid())
  name      String // Nombre del examen (1 Parcial, 2 Parcial, Final, Recuperatorio, etc.)
  date      DateTime // Fecha del examen
  location  String // Lugar donde se rendirá el examen
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId String
  examType  ExamType
  duration  Int?
  capacity  Int

  studentsEnrolled ExamRegistration[]

  @@index([subjectId])
}

enum ExamType {
  PARCIAL
  FINAL
  RECUPERATORIO
  LIBRE
  OTRO
}

model Career {
  id   String @id @default(uuid())
  name String
  code String @unique

  students Student[]

  subjects               Subject[]
  audiencesCommunication AudienceCommunication[]
}

model Department {
  id         String      @id @default(uuid())
  name       String
  professors Professor[]
  subjects   Subject[]
  location   String?
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  message   String
  createdAt DateTime @default(now())

  @@index([userId])
}

model Message {
  id        String   @id @default(uuid())
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  text      String
  timestamp DateTime @default(now())

  @@index([senderId])
}

model Reply {
  id      String   @id @default(uuid())
  content String
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime

  @@index([userId])
}

model Schedule {
  id String @id @default(uuid())

  room        String // Aula o lugar en el que se dicta la clase
  days        String[] // Días en los que se dicta la clase (ej. ["Monday", "Wednesday"])
  startTime   String // Hora de inicio (podría cambiarse a DateTime si lo prefieres)
  endTime     String // Hora de fin
  semester    String
  startDate   DateTime
  endDate     DateTime
  capacity    Int
  enrolled    Int // Cantidad de estudiantes inscritos
  waitlist    Int? // Cantidad de estudiantes en la lista de espera
  description String?

  typeSchedule TypeSchedule   @default(TEORICA)
  status       ScheduleStatus @default(ACTIVO)

  subject     Subject   @relation(fields: [subjectId], references: [id])
  subjectId   String
  professor   Professor @relation(fields: [professorId], references: [id])
  professorId String

  students Student[] // estudiantes inscritos

  sessions Session[] // Relación con sesiones de clase

  prerequisites CorrelativeSubject[]

  @@index([subjectId])
  @@index([professorId])
}

enum ScheduleStatus {
  ACTIVO
  CANCELADO
  COMPLETADO
}

model Session {
  id         String   @id @default(uuid())
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String
  date       DateTime
  topic      String
  attendance Int

  @@index([scheduleId])
}

enum TypeSchedule {
  TEORICA
  PRACTICA
  LABORATORIO
  OTRO
}

model Communication {
  id       Int      @id @default(autoincrement())
  title    String
  content  String
  sentDate DateTime
  tags     String[]

  type     TypeCommunication
  status   StatusCommunication
  priority PriorityCommunication

  sender   Admin  @relation(fields: [senderId], references: [id])
  senderId String

  audience AudienceCommunication[] // carreras a las que se envía la comunicación

  @@index([senderId])
}

model AudienceCommunication {
  id Int @id @default(autoincrement())

  career          Career         @relation(fields: [careerId], references: [id])
  careerId        String
  Communication   Communication? @relation(fields: [communicationId], references: [id])
  communicationId Int?

  @@index([careerId])
  @@index([communicationId])
}

enum TypeCommunication {
  ANUNCIO
  NOTIFICACION
}

enum StatusCommunication {
  ENVIADO
  BORRADOR
}

enum PriorityCommunication {
  BAJO
  MEDIO
  ALTO
  URGENTE
}
