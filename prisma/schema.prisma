generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique

  name     String // Nombre del usuario
  password String // Contraseña del usuario
  role     Role    @default(STUDENT)
  avatar   String?

  userStatus UserStatus

  student   Student?
  professor Professor?

  messages      Message[]
  replies       Reply[]
  notifications Notification[]
}

enum Role {
  ADMIN
  STUDENT
  TEACHER
}

enum UserStatus {
  ACTIVO
  INACTIVO
}

model Student {
  id          String       @id @default(uuid())
  user        User?        @relation(fields: [userId], references: [id])
  userId      String?      @unique
  enrollments Enrollment[] // Materias inscritas por el estudiante

  academicRecord AcademicRecord? // Historial académico del estudiante
}

model AcademicRecord {
  id String @id @default(uuid())

  averageGrade          Float? // Promedio general del estudiante
  completedCourses      Int? // Cursos completados por el estudiante
  coursesEnrolled       Int? // Cursos inscritos por el estudiante
  progressPercentCarrer Float? // Porcentaje de avance en el carrer

  student   Student @relation(fields: [studentId], references: [id])
  studentId String  @unique

  @@index([studentId])
}

model Enrollment {
  id           String   @id @default(uuid())
  student      Student  @relation(fields: [studentId], references: [id]) // Estudiante al que pertenece la inscripción
  studentId    String
  course       Course   @relation(fields: [courseId], references: [id]) // Materia a la que se inscribió el estudiante
  courseId     String
  year         Int // Año de la inscripción
  semester     Int // Cuatrimestre de la inscripción
  grade        Float? // Calificación de la inscripción
  registeredAt DateTime @default(now()) // Fecha y hora de la inscripción

  @@index([courseId])
  @@index([studentId])
}

model Professor {
  id    String @id @default(uuid())
  name  String // Nombre del profesor
  email String @unique // Correo del profesor 

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  departments Department[] // Departamentos a los que pertenece el profesor
  courses     Course[] // materas dictadas por el profesor
}

model Course {
  id   String @id @default(uuid())
  code String @unique

  name        String // Nombre de la materia
  year        Int // Año de la materia
  semester    Int // Cuatrimestre de la materia
  description String? // Descripción de la materia
  capacity    Int // Capacidad de la materia

  career       Career     @relation(fields: [careerId], references: [id]) // La carrera a la que pertenece la materia
  careerId     String
  department   Department @relation(fields: [departmentId], references: [id]) // El departamento al que pertenece la materia  (catedra)
  departmentId String

  professors  Professor[] // Profesores que dictan la materia
  students    Enrollment[] // Estudiantes matriculados en la materia
  evaluations Evaluation[] // Evaluaciones de la materia

  @@index([careerId])
  @@index([departmentId])
}

model Evaluation {
  id       String   @id @default(uuid())
  name     String // Nombre de la evaluación (1 Parcial, 2 Parcial, Final, etc.)
  date     DateTime // Fecha de la evaluación
  course   Course   @relation(fields: [courseId], references: [id])
  courseId String

  @@index([courseId])
}

model Career {
  id      String   @id @default(uuid())
  name    String
  code    String   @unique
  courses Course[]
}

model Department {
  id         String      @id @default(uuid())
  name       String
  professors Professor[]
  courses    Course[]
  location   String?
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  message   String
  createdAt DateTime @default(now())

  @@index([userId])
}

model Message {
  id        String   @id @default(uuid())
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  text      String
  timestamp DateTime @default(now())

  @@index([senderId])
}

model Reply {
  id      String   @id @default(uuid())
  content String
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime

  @@index([userId])
}
