generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique

  name     String // Nombre del usuario
  password String // Contraseña del usuario
  role     Role    @default(ESTUDIANTE)
  avatar   String?

  userStatus UserStatus

  student   Student?
  professor Professor?

  messages      Message[]
  replies       Reply[]
  notifications Notification[]
}

enum Role {
  ADMIN
  ESTUDIANTE
  PROFESOR
}

enum UserStatus {
  ACTIVO
  INACTIVO
}

model Student {
  id             String                @id @default(uuid())
  user           User?                 @relation(fields: [userId], references: [id])
  userId         String?               @unique
  subjectRecords SubjectRegistration[] // Materias inscritas por el estudiante
  examRecords    ExamRegistration[]

  academicRecord AcademicRecord? // Historial académico del estudiante
}

model AcademicRecord {
  id String @id @default(uuid())

  averageGrade          Float? // Promedio general del estudiante
  completedSubjects     Int? // Materias completadas por el estudiante
  subjectRecords        Int? // Materias inscritas por el estudiante
  progressPercentCarrer Float? // Porcentaje de avance en la carrera

  student   Student @relation(fields: [studentId], references: [id])
  studentId String  @unique

  @@index([studentId])
}

model SubjectRegistration {
  // modelo de inscripción de estudiantes en materias
  id           String   @id @default(uuid())
  student      Student  @relation(fields: [studentId], references: [id]) // Estudiante al que pertenece la inscripción
  studentId    String
  subject      Subject  @relation(fields: [subjectId], references: [id]) // Materia a la que se inscribió el estudiante
  subjectId    String
  year         Int // Año de la inscripción
  semester     Int // Cuatrimestre de la inscripción
  grade        Float? // Calificación de la inscripción
  registeredAt DateTime @default(now()) // Fecha y hora de la inscripción a la materia

  @@index([subjectId])
  @@index([studentId])
}

model ExamRegistration {
  id           String   @id @default(uuid())
  student      Student  @relation(fields: [studentId], references: [id]) // Estudiante al que pertenece la inscripción
  studentId    String
  exam         Exam     @relation(fields: [examId], references: [id]) // Examen a la que se inscribió el estudiante
  examId       String
  year         Int // Año de la inscripción
  semester     Int // Cuatrimestre de la inscripción
  grade        Float? // Calificación de la inscripción
  registeredAt DateTime @default(now()) // Fecha y hora de la inscripción a la materia

  @@index([examId])
  @@index([studentId])
}

model Professor {
  id    String @id @default(uuid())
  name  String // Nombre del profesor
  email String @unique // Correo del profesor 

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  departments Department[] // Departamentos a los que pertenece el profesor
  subjects    Subject[] // Materias dictadas por el profesor
}

model Subject {
  id   String @id @default(uuid())
  code String @unique

  name        String // Nombre de la materia
  year        Int // Año de la materia
  semester    Int // Cuatrimestre de la materia
  description String? // Descripción de la materia
  capacity    Int // Capacidad de la materia

  progressPercentage Float // porcentaje de cuanto falta para terminar la materia

  career       Career     @relation(fields: [careerId], references: [id]) // La carrera a la que pertenece la materia
  careerId     String
  department   Department @relation(fields: [departmentId], references: [id]) // El departamento al que pertenece la materia (cátedra)
  departmentId String

  professors          Professor[] // Profesores que dictan la materia
  students            SubjectRegistration[] // Estudiantes matriculados en la materia
  exams               Exam[] // Exámenes de la materia
  correlativeSubjects CorrelativeSubject[] // Materias correlativas

  @@index([careerId])
  @@index([departmentId])
}

model CorrelativeSubject {
  id String @id @default(uuid())

  subject   Subject? @relation(fields: [subjectId], references: [id])
  subjectId String?

  @@index([subjectId])
}

model Exam {
  id        String   @id @default(uuid())
  name      String // Nombre del examen (1 Parcial, 2 Parcial, Final, Recuperatorio, etc.)
  date      DateTime // Fecha del examen
  location  String // Lugar donde se rendirá el examen
  subject   Subject  @relation(fields: [subjectId], references: [id])
  subjectId String
  examType  ExamType // Tipo de examen (parcial, final, etc.)
  duration  Int? // Duración en minutos

  studentsEnrolled ExamRegistration[]

  @@index([subjectId])
}

enum ExamType {
  PARCIAL
  FINAL
  RECUPERATORIO
  LIBRE
  OTRO
}

model Career {
  id       String    @id @default(uuid())
  name     String
  code     String    @unique
  subjects Subject[]
}

model Department {
  id         String      @id @default(uuid())
  name       String
  professors Professor[]
  subjects   Subject[]
  location   String?
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  message   String
  createdAt DateTime @default(now())

  @@index([userId])
}

model Message {
  id        String   @id @default(uuid())
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  text      String
  timestamp DateTime @default(now())

  @@index([senderId])
}

model Reply {
  id      String   @id @default(uuid())
  content String
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  date    DateTime

  @@index([userId])
}
